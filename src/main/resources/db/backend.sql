-- 백엔드 기술면접 질문 데이터
INSERT INTO question (job, question, priority, difficulty, answer)
VALUES ('백엔드 기술면접', 'REST와 SOAP의 차이점은 무엇인가요?', 1, 2,
        '# REST와 SOAP의 차이점\n\nREST는 HTTP 프로토콜을 기반으로 한 경량 아키텍처로, JSON 형식으로 데이터를 주고받습니다. 반면, SOAP는 XML을 사용하는 더 무거운 프로토콜로, 보안성과 트랜잭션 관리가 필요할 때 주로 사용됩니다. REST는 확장성과 유연성 면에서 우수하며, SOAP는 엔터프라이즈 시스템에서 많이 사용됩니다.'),
       ('백엔드 기술면접', '의존성 주입(Dependency Injection)의 개념과 이점은 무엇인가요?', 2, 1,
        '# 의존성 주입(Dependency Injection)의 개념과 이점\n\n의존성 주입은 객체 간의 의존 관계를 외부에서 설정해주는 디자인 패턴입니다. 이를 통해 코드의 결합도를 낮추고, 테스트와 유지보수성을 높일 수 있습니다. 의존성 주입을 사용하면 코드의 유연성이 증가하고, 테스트 시 모킹을 사용해 독립적인 검증이 가능합니다.'),
       ('백엔드 기술면접', '트랜잭션이란 무엇이며, 트랜잭션의 ACID 속성을 설명해주세요.', 3, 2,
        '# 트랜잭션과 ACID 속성\n\n트랜잭션은 데이터베이스의 상태를 변경하는 작업의 단위입니다. ACID 속성은 트랜잭션의 일관성과 안정성을 보장하기 위한 네 가지 속성으로, **Atomicity(원자성)**, **Consistency(일관성)**, **Isolation(고립성)**, **Durability(지속성)**을 의미합니다. 이 속성들은 데이터베이스의 신뢰성을 높이기 위해 필수적입니다.'),
       ('백엔드 기술면접', 'SQL과 NoSQL 데이터베이스의 차이점은 무엇인가요?', 4, 3,
        '# SQL과 NoSQL의 차이점\n\nSQL 데이터베이스는 관계형 데이터베이스로, 스키마가 고정되어 있으며 트랜잭션을 지원합니다. 반면, NoSQL은 비관계형 데이터베이스로, 스키마가 유연하고 확장성이 뛰어나 대규모 데이터를 처리하는 데 적합합니다. SQL은 데이터 무결성이 중요한 환경에 적합하고, NoSQL은 높은 확장성을 필요로 하는 환경에서 사용됩니다.'),
       ('백엔드 기술면접', '자바에서 가비지 컬렉션(Garbage Collection)이 어떻게 작동하나요?', 5, 3,
        '# 자바의 가비지 컬렉션\n\n자바의 가비지 컬렉션은 더 이상 참조되지 않는 객체를 자동으로 메모리에서 해제하는 프로세스입니다. 주로 Mark-and-Sweep 알고리즘이 사용되며, 힙 영역의 메모리 관리 효율을 높입니다. 이를 통해 개발자는 메모리 관리를 수동으로 처리하지 않아도 되며, 시스템의 안정성을 보장받을 수 있습니다.'),
       ('백엔드 기술면접', 'OAuth와 JWT의 차이점은 무엇인가요?', 3, 4,
        '# OAuth와 JWT의 차이점\n\nOAuth는 외부 애플리케이션이 사용자 데이터를 접근할 수 있도록 인증하는 프로토콜이며, JWT는 인증 정보를 JSON 형식의 토큰으로 관리하여 인증을 처리합니다. JWT는 자가 포함형 토큰으로, 서버와의 추가적인 통신 없이 클라이언트에서 검증할 수 있습니다. OAuth는 주로 인증된 권한을 위임하는 데 사용되며, JWT는 상태를 유지하지 않는 인증에 주로 사용됩니다.'),
       ('백엔드 기술면접', '서버 부하 분산(Load Balancing)은 어떻게 구현되나요?', 2, 4,
        '# 서버 부하 분산(Load Balancing)\n\n로드 밸런싱은 여러 서버에 트래픽을 분산하여 서버의 과부하를 방지하고 성능을 최적화하는 방법입니다. 일반적으로 Round Robin, Least Connections, IP Hash와 같은 알고리즘을 사용하여 트래픽을 분배합니다. 이를 통해 고가용성과 성능을 유지할 수 있으며, 실제 서버 부하 분산 시스템을 구축한 경험을 설명하는 것이 좋습니다.'),
       ('백엔드 기술면접', 'CI/CD 파이프라인이란 무엇이며, 이를 통해 어떻게 소프트웨어 개발 속도를 높일 수 있나요?', 1, 3,
        '# CI/CD 파이프라인\n\nCI/CD는 Continuous Integration(지속적인 통합)과 Continuous Deployment(지속적인 배포)를 의미하며, 자동화된 빌드, 테스트, 배포 프로세스를 통해 개발 주기를 단축할 수 있습니다. CI는 새로운 코드를 주기적으로 통합하고, CD는 이를 자동으로 배포하는 과정을 관리합니다. Jenkins, GitLab CI/CD 등의 도구를 사용해 실제로 파이프라인을 구성한 경험을 설명할 수 있습니다.'),
       ('백엔드 기술면접', 'Spring Security를 사용하여 인증과 인가를 처리하는 방법은 무엇인가요?', 3, 5,
        '# Spring Security의 인증과 인가 처리\n\nSpring Security는 자바 애플리케이션에서 인증과 인가를 처리하는 데 사용됩니다. 주로 JWT, OAuth2 등의 토큰을 이용하여 인증을 수행하며, 권한 기반의 인가를 지원합니다. 면접에서는 Spring Security를 사용하여 API 접근을 제어한 경험과 보안 강화 방법에 대해 설명할 수 있습니다.'),
       ('백엔드 기술면접', '마이크로서비스 아키텍처와 모놀리틱 아키텍처의 차이점은 무엇인가요?', 2, 3,
        '# 마이크로서비스와 모놀리틱 아키텍처\n\n모놀리틱 아키텍처는 애플리케이션이 하나의 큰 단일 애플리케이션으로 구성되는 반면, 마이크로서비스 아키텍처는 각 서비스가 독립적으로 배포되고 관리됩니다. 마이크로서비스는 확장성과 유지보수성이 뛰어나지만, 복잡한 관리가 필요합니다. 반면, 모놀리틱은 배포와 관리가 단순하지만 확장성에 제약이 있습니다. 경험을 공유할 때는 마이크로서비스 도입 시 이점과 도전 과제를 설명하면 좋습니다.'),

        ('백엔드 기술면접', 'DTO(Data Transfer Object)와 VO(Value Object)의 차이점은 무엇인가요?', 3, 2,
        '# DTO와 VO의 차이점\n\nDTO는 데이터를 전달하는 데 사용되며, 주로 계층 간의 데이터 이동을 위해 사용됩니다. VO는 불변 객체로, 주로 비즈니스 값의 의미를 나타내며, 변경 불가능한 속성을 가지고 있습니다.'),
        ('백엔드 기술면접', '자바의 스트림(Stream) API에 대해 설명해주세요.', 2, 2,
        '# 자바의 스트림 API\n\n자바의 스트림 API는 컬렉션 데이터를 처리하기 위한 함수형 프로그래밍 도구입니다. 스트림을 사용하면 데이터를 필터링, 매핑, 정렬 등의 작업을 간결하게 수행할 수 있으며, 병렬 처리를 통해 성능을 향상시킬 수 있습니다.'),
        ('백엔드 기술면접', 'Docker란 무엇이며, 백엔드 개발에서 어떻게 활용할 수 있나요?', 1, 2,
        '# Docker란 무엇인가\n\nDocker는 컨테이너 기반의 가상화 기술로, 애플리케이션과 그 의존성을 컨테이너에 담아 어디서든 동일한 환경에서 실행할 수 있게 합니다. 이를 통해 개발, 테스트, 배포 환경을 일관되게 유지할 수 있습니다.'),
        ('백엔드 기술면접', 'ElasticSearch란 무엇이며, 어떤 상황에서 사용하나요?', 3, 3,
        '# ElasticSearch란?\n\nElasticSearch는 분산형 검색 엔진으로, 대규모 데이터에서 빠른 검색과 분석이 필요한 경우 사용됩니다. 주로 로그 데이터 분석, 실시간 검색 기능 구현, 텍스트 기반의 대량 데이터 처리를 위한 시스템에 적용됩니다.'),
        ('백엔드 기술면접', '서킷 브레이커 패턴(Circuit Breaker Pattern)이란 무엇인가요?', 2, 4,
        '# 서킷 브레이커 패턴\n\n서킷 브레이커 패턴은 시스템 내의 특정 서비스가 과부하로 인해 실패할 때, 추가적인 실패를 방지하기 위해 해당 서비스 호출을 중단하는 방식입니다. 이를 통해 시스템 전체에 대한 충격을 최소화할 수 있습니다.'),
        ('백엔드 기술면접', '이벤트 소싱(Event Sourcing) 패턴에 대해 설명해주세요.', 4, 4,
        '# 이벤트 소싱 패턴\n\n이벤트 소싱은 상태 변경을 이벤트로 기록하고, 이벤트 로그를 기반으로 시스템 상태를 재구성하는 방식입니다. 이를 통해 데이터 변경 내역을 추적하고, 재생할 수 있습니다. 주로 복잡한 비즈니스 로직을 다루는 시스템에서 사용됩니다.'),
        ('백엔드 기술면접', 'HTTPS와 SSL/TLS의 차이점에 대해 설명해주세요.', 2, 3,
        '# HTTPS와 SSL/TLS\n\nHTTPS는 HTTP에 SSL/TLS 프로토콜을 결합한 형태로, 웹에서의 안전한 통신을 보장합니다. SSL/TLS는 데이터를 암호화하여 클라이언트와 서버 간 통신의 기밀성을 유지하며, HTTPS는 이러한 SSL/TLS 프로토콜을 적용하여 보안성을 제공합니다.'),
        ('백엔드 기술면접', 'JWT의 구조에 대해 설명해주세요.', 2, 2,
        '# JWT의 구조\n\nJWT는 세 가지 부분으로 구성됩니다: 헤더(Header), 페이로드(Payload), 서명(Signature). 헤더에는 토큰의 타입과 해싱 알고리즘이 포함되며, 페이로드는 사용자의 정보와 클레임을 포함하고, 서명은 토큰이 변조되지 않았음을 검증합니다.'),
        ('백엔드 기술면접', 'REST API 설계 원칙 중 하나인 "Idempotency"란 무엇인가요?', 3, 2,
        '# Idempotency란?\n\nIdempotency는 동일한 요청을 여러 번 수행하더라도 서버의 상태가 변하지 않는 특성을 말합니다. 주로 HTTP 메서드에서 PUT과 DELETE가 이 원칙을 따르며, 이를 통해 클라이언트가 안전하게 요청을 재시도할 수 있습니다.'),
        ('백엔드 기술면접', '마이크로서비스 아키텍처에서 서비스 간 통신을 위해 어떤 방식을 사용하나요?', 2, 3,
        '# 서비스 간 통신 방식\n\n마이크로서비스 아키텍처에서 서비스 간 통신은 주로 HTTP REST, gRPC, 메시지 큐(Message Queue) 등을 통해 이루어집니다. HTTP REST는 동기식 방식으로, gRPC는 고성능 통신을 제공하며, 메시지 큐는 비동기 통신을 지원하여 높은 확장성과 유연성을 제공합니다.'),

        ('백엔드 기술면접', 'API 게이트웨이란 무엇이며, 마이크로서비스 아키텍처에서 왜 중요한가요?', 2, 3,
            '# API 게이트웨이\n\nAPI 게이트웨이는 클라이언트 요청을 적절한 마이크로서비스로 라우팅하고, 부하 분산, 인증, 로깅 등의 작업을 처리하는 중요한 컴포넌트입니다. 마이크로서비스 아키텍처에서 통신과 관리 복잡성을 줄이기 위한 필수적인 도구입니다.'),
        ('백엔드 기술면접', 'CQRS(Command Query Responsibility Segregation) 패턴에 대해 설명해주세요.', 3, 4,
        '# CQRS 패턴\n\nCQRS는 명령(Command)과 조회(Query) 작업을 분리하여 서로 독립적으로 처리하는 패턴입니다. 이 패턴을 사용하면 쓰기 작업과 읽기 작업을 분리함으로써 시스템 성능과 확장성을 향상시킬 수 있습니다.'),
        ('백엔드 기술면접', '동시성 문제(Concurrency Issue)를 해결하는 방법에는 무엇이 있나요?', 4, 4,
        '# 동시성 문제 해결 방법\n\n동시성 문제를 해결하기 위해서는 락(lock) 메커니즘, 트랜잭션 관리, 비동기 처리 및 멀티스레딩 설계를 고려할 수 있습니다. 특히, 낙관적 락과 비관적 락의 차이점을 설명할 수 있으며, 트랜잭션 격리 수준도 동시성 문제를 해결하는 데 중요한 역할을 합니다.'),
        ('백엔드 기술면접', 'Java의 스레드 풀(Thread Pool)에 대해 설명해주세요.', 2, 2,
        '# 스레드 풀(Thread Pool)\n\n스레드 풀은 미리 생성된 스레드의 풀을 유지하면서 요청이 들어올 때마다 스레드를 재사용하는 방식으로 시스템 자원을 효율적으로 관리하는 기법입니다. 이를 통해 새로운 스레드를 생성하는 오버헤드를 줄이고 성능을 최적화할 수 있습니다.'),
        ('백엔드 기술면접', 'Redis와 Memcached의 차이점은 무엇인가요?', 3, 3,
        '# Redis와 Memcached의 차이점\n\nRedis는 데이터 구조 서버로서 키-값뿐만 아니라 리스트, 해시, 셋 등의 복잡한 데이터 구조를 지원합니다. 반면, Memcached는 단순한 키-값 저장소로, 주로 캐싱에 사용됩니다. Redis는 지속성 및 복구 기능을 지원하는 반면, Memcached는 데이터 영속성이 없습니다.'),
        ('백엔드 기술면접', '동기화 블록(Synchronized Block)과 동기화 메서드(Synchronized Method)의 차이점은 무엇인가요?', 2, 3,
        '# 동기화 블록과 메서드 차이\n\n동기화 블록은 메서드 내 특정 부분만 동기화하여 필요한 부분에서만 락을 거는 방식으로, 성능에 더 유리합니다. 반면, 동기화 메서드는 메서드 전체를 동기화하며, 락의 범위가 더 넓습니다. 상황에 따라 성능 최적화를 위해 동기화 블록을 사용하는 것이 좋습니다.'),
        ('백엔드 기술면접', 'WebSocket과 HTTP의 차이점은 무엇인가요?', 1, 2,
        '# WebSocket과 HTTP의 차이점\n\nHTTP는 요청-응답 기반의 통신 프로토콜로, 클라이언트가 서버에 요청할 때만 응답을 받을 수 있습니다. 반면, WebSocket은 서버와 클라이언트 간의 양방향 통신을 지원하여 실시간 데이터 전송에 적합합니다. 주로 채팅 애플리케이션, 실시간 피드 업데이트 등에 사용됩니다.'),
        ('백엔드 기술면접', 'AOP(Aspect-Oriented Programming)의 개념과 사용 사례를 설명해주세요.', 2, 3,
        '# AOP(Aspect-Oriented Programming)\n\nAOP는 핵심 로직과 공통 기능(로깅, 트랜잭션 등)을 분리하여 모듈화하는 프로그래밍 패러다임입니다. 이를 통해 코드 중복을 줄이고, 코드의 가독성과 유지보수성을 높일 수 있습니다. 주로 로깅, 보안, 트랜잭션 관리에서 사용됩니다.'),
        ('백엔드 기술면접', 'Failover와 Fallback의 차이점은 무엇인가요?', 3, 4,
        '# Failover와 Fallback의 차이점\n\nFailover는 주 서버에 장애가 발생했을 때 백업 서버로 자동 전환하는 기술입니다. 반면, Fallback은 기본 서비스가 실패할 경우 대체 기능이나 서비스로 전환하는 방식으로, 주로 서킷 브레이커 패턴에서 사용됩니다.'),
        ('백엔드 기술면접', 'REST API에서 CORS(Cross-Origin Resource Sharing)가 필요한 이유는 무엇인가요?', 2, 2,
        '# CORS가 필요한 이유\n\nCORS는 웹 브라우저가 서로 다른 도메인 간의 요청을 제어하기 위한 보안 메커니즘입니다. 기본적으로 브라우저는 동일 출처 정책을 따르며, CORS 설정을 통해 다른 도메인에서의 리소스 요청을 허용할 수 있습니다. 이를 통해 API 보안을 강화하면서도 필요한 요청을 허용할 수 있습니다.')